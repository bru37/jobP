//Hello.js에 이름과 색을 정해서 보내줌,보내주는역활,웹으로 보여줌
//Counter.js에서 함수를 받아서 UI로 보여줌,렌더링
import Hello from "./Hello";
import React, { useCallback, useMemo, useRef, useState } from "react";
import Wrapper from "./Wrapper";
import Counter from "./Counter";
import InputSample from "./inputSample";
import InputSampleTwo from "./inputSampleTwo";
import InputSampleThree from "./inputSample";
import UserList from "./UserList";
import CreateUser from "./CreateUser";

function countActiveUsers(users) {
    console.log("활성 사용자 수를 세는중");
    return users.filter((user) => user.active).length;
}

function App() {
    const [search, setSearch] = useState({ username: "", email: "" });
    const { username, email } = search;
    const onChange = useCallback(
        (e) => {
            const { name, value } = e.target;
            setSearch({
                ...search,
                [name]: value,
                //setSearch 가 search변수의 값을 변경해줌
            });
        },
        [search]
    );
    // const users = [--->useState를 사용해서 컴포넌트의 상태로 변경
    //UI창에 계정명을 클릭했을떄 색이 바뀌게 하려면 계정명에 active :true와false를 주자
    const [users, setUsers] = useState([
        {
            id: 1,
            username: "velopert",
            email: "public.velopert@gmail.com",
            active: true,
        },
        {
            id: 2,
            username: "tester",
            email: "tester@example.com",
            active: false,
        },
        {
            id: 3,
            username: "liz",
            email: "liz@example.com",
            active: false,
        },
    ]);

    const nextId = useRef(4);
    const onCreate = useCallback(() => {
        const user = {
            id: nextId.current,
            username,
            email,
        };

        // nextId.current += 1;
        //current 는 useRef()를 사용할떄 파라미터로 넣어주면 .current값의 기본값이된다
        //그리고 이 값을 수정할떄는 .current 값을 수정하면 되고 조회 할 떄에는 .current를 조회하면된다
        setUsers(users.concat(user));
        setSearch({
            username: "",
            email: "",
        });
        setUsers([...users, user]);
        setSearch({
            username: "",
            email: "",
        });
        nextId.current += 1;
    }, [users, username, email]);
    const onRemove = useCallback((id) => {
        // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듬
        // = user.id 가 id 인 것을 제거함
        setUsers(users.filter((user) => user.id !== id));->setUsers는 users를 바꾸기위해서 사용한다
    }, []);                                              ->users라는 배열에서 filter를 사용해서 배열내에서 내가 찾고자하는것을 찾겠다라는 말
                                                         ->user객체에서 user id에서 일치하지 않는 id를 찾는다                             
   
    //map은 배열의 불변성을 유지하면서 배열을 업데이트할떄 map함수를 사용함
    // id값을 비교했을때 id가 다르면 그대로 두고 같으면 active값을 반전시키자
    const onToggle = (id) => {--->id라는 파라미터를 받음,onToggle는 체크 또는 중간선을 완료했을떄 완료되었다고 알려주는 이벤트
        setUsers(
            users.map((user) =>
                user.id === id ? { ...user, active: !user.active } : user
            )
        );
    };
    const count = useMemo(() => countActiveUsers(users), []);
    return (
        <>
            <CreateUser
                username={username}
                email={email}
                onChange={onChange}
                onCreate={onCreate}
            />
            <UserList users={users} onRemove={onRemove} onToggle={onToggle} />
            <div>활용사용자 수 :{count}</div>
        </>
        //UserList.js에 있는 UserList에 있는 users에 {users}의 객체를 가지고옴
        // <Wrapper>
        //     <Hello name="phill" color="pink" isSpecial={true} />
        // {true}->자바스크립트 값이기 떄문에 {}로 사용,isSpecial={true} === isSpecial
        //
        //    <Hello color="black" />
        //     <br />
        //     <Counter />
        //     {/* self-closing tags는 태그와 태그 사이에 내용이 들어가지 않을떄 사용함
        //          */}
        //     <br />
        //     <InputSample />
        //     <br />
        //     <InputSampleTwo />
        //     <br />
        //     <InputSampleThree />
        //     <br />
        //     <UserList />
        // </Wrapper>
    );
}

export default App;

// 존재하지 않는 아이디를 추가해야 하기떄문에 아이페프로 함수를 만등럼
// 123 번은 있고 없는 4번을 초깃값으로 둠

// 알이에프에는 커런트(속성)가 자동적으로 들어가서 현재를 기준으로 동적으로 변경해줘야함
